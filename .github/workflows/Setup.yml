name: Run DL.PS1 Script (Non-Interactive)

on:
  workflow_dispatch:
    inputs:
      user_id:
        description: 'Desired user ID for preferences.json (e.g., your_username_123)'
        required: true
        default: 'github-actions-user'
      batch_name:
        description: 'Optional batch name for preferences.json (leave empty for none)'
        required: false
        default: ''
      video_id:
        description: 'Optional video ID for preferences.json (leave empty for none)'
        required: false
        default: ''

jobs:
  run-script:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure Git for long paths (for Windows compatibility)
        run: git config --system core.longpaths true
        shell: pwsh

      - name: Execute PowerShell Script with Pre-filled Data
        shell: pwsh
        run: |
          $scriptUrl = "https://raw.githubusercontent.com/shubhamakshit/pwdlv3_assets/main/dl.pwdlv3.ps1"
          Write-Host "Downloading script from $scriptUrl..."

          # --- Step 1: Download the script content ---
          try {
              $scriptContent = Invoke-WebRequest -Uri $scriptUrl -UseBasicParsing | Select-Object -ExpandProperty Content
              Write-Host "Script downloaded successfully."
          } catch {
              Write-Error "Failed to download script: $($_.Exception.Message)"
              exit 1
          }

          # --- Step 2: Modify script content to make it non-interactive and fix syntax ---
          # Remove 'Read-Host "Press Enter to exit..."' lines to prevent hanging
          $modifiedScriptContent = $scriptContent -replace 'Read-Host "Press Enter to exit..."', ''
          
          # Fix potential syntax error in the original script: [string]$Title = Script Automation
          # This specifically targets the line to ensure it has quotes, common issue if the URL content differs slightly
          $modifiedScriptContent = $modifiedScriptContent -replace '(?<=\[string\]\$Title = )Script Automation', '"Script Automation"'
          
          Write-Host "Script modified for non-interactive execution and syntax corrected."

          # --- Step 3: Prepare the inputs to be piped to the script ---
          $inputData = @(
              "y", # Responds to "Do you want to enter a custom user ID (y/n)?"
              "${{ github.event.inputs.user_id }}", # Responds to "Enter your desired user ID"
              "${{ github.event.inputs.batch_name }}", # Responds to "Enter an optional batch name"
              "${{ github.event.inputs.video_id }}" # Responds to "Enter an optional video ID"
          )

          Write-Host "Piping inputs to script (order matters):"
          $inputData | ForEach-Object { Write-Host "  - $_" }

          # --- Step 4: Write inputs to a temporary file ---
          $tempInputFile = New-TemporaryFile
          $inputData | Set-Content $tempInputFile.FullName -Encoding UTF8

          Write-Host "Inputs written to temporary file: $($tempInputFile.FullName)"

          # --- Step 5: Write the modified script to another temporary file ---
          $tempScriptFile = New-TemporaryFile
          $modifiedScriptContent | Set-Content $tempScriptFile.FullName -Encoding UTF8

          Write-Host "Modified script written to temporary file: $($tempScriptFile.FullName)"

          # --- Step 6: Execute the temporary script file, redirecting input from the input file ---
          # We execute the temporary script file using `pwsh.exe -File`,
          # and then use `Start-Process` with `-RedirectStandardInput` to feed the inputs.
          # This clearly separates script execution from input redirection.
          $process = Start-Process -FilePath "pwsh.exe" `
              -ArgumentList "-NoProfile", "-ExecutionPolicy", "Bypass", "-File", "$($tempScriptFile.FullName)" `
              -RedirectStandardInput $tempInputFile.FullName `
              -PassThru -NoNewWindow -Wait

          # Clean up temporary files
          Remove-Item $tempInputFile.FullName -ErrorAction SilentlyContinue
          Remove-Item $tempScriptFile.FullName -ErrorAction SilentlyContinue

          # Check the exit code of the PowerShell process
          if ($process.ExitCode -ne 0) {
              Write-Error "PowerShell script exited with error code: $($process.ExitCode)"
              exit $process.ExitCode
          } else {
              Write-Host "PowerShell script completed successfully."
          }

          Write-Host "--------------------------------------------------------"
          Write-Host "Post-execution check: Looking for cloned repository and preferences.json..."
          $repoPath = Join-Path $env:USERPROFILE "Documents\pwdlv3"
          if (Test-Path $repoPath) {
              Write-Host "Repository 'pwdlv3' found at: $repoPath"
              $prefsPath = Join-Path $repoPath "preferences.json"
              if (Test-Path $prefsPath) {
                  Write-Host "preferences.json found at: $prefsPath. Content:"
                  Get-Content $prefsPath | Write-Host
              } else {
                  Write-Warning "preferences.json not found in the cloned repository. This might indicate an issue with the script's execution."
              }
          } else {
              Write-Warning "Repository 'pwdlv3' not found at expected path: $repoPath. This indicates a failure in the cloning step."
          }
